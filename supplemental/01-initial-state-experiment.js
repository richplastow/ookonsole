// Generated by CoffeeScript 1.9.2
(function() {
  var AppState, ª;

  ª = console.log.bind(console);

  AppState = (function() {
    function AppState(config) {
      var M;
      M = "/supplemental/01-initial-state-experiment.litcoffee AppState()\n  ";
      this.ookonsole = config.ookonsole;
      if ('undefined' === typeof config.$wrap) {
        this.$wrap = null;
      } else if (config.$wrap instanceof window.HTMLElement) {
        this.$wrap = config.$wrap;
      } else {
        throw Error(M + "`config.$wrap` is not an instance of `HTMLElement`");
      }
      if (!this.$wrap) {
        this.$style = null;
      } else {
        this.$style = document.createElement('style');
        this.$style.innerHTML = '#list { outline: 4px solid red; }';
      }
      if (!this.$wrap) {
        this.$list = null;
      } else {
        this.$list = document.createElement('ul');
        this.$list.setAttribute('class', 'app-state-list');
      }
      this.state = {
        theList: []
      };
      this.transactionTime = null;
    }

    AppState.prototype.show = function() {
      var ref, ref1;
      if ((ref = this.$wrap) != null) {
        ref.appendChild(this.$style);
      }
      return (ref1 = this.$wrap) != null ? ref1.appendChild(this.$list) : void 0;
    };

    AppState.prototype.hide = function() {
      var ref, ref1;
      if ((ref = this.$wrap) != null) {
        ref.removeChild(this.$style);
      }
      return (ref1 = this.$wrap) != null ? ref1.removeChild(this.$list) : void 0;
    };

    AppState.prototype.start = function() {
      var command, i, len, log, noCmdDisp, noNothing, noStorage, ref, run;
      this.ookonsole.addTask('add', {
        summary: "Creates a record, and appends it to the list",
        completions: ['add '],
        details: "add\n---\nXx. \n\nadd           With no options, xx\nadd <record>  Create <record>, and append it to the list\n",
        runner: function(context, options) {
          context.state.theList.push(options[0]);
          if (null === context.transactionTime) {
            context.$list.innerHTML += "<li id='" + options[0] + "'>" + options[0] + "</li>";
          }
          return "added " + options[0];
        }
      });
      this.ookonsole.addTask('delete', {
        summary: "Removes a record to the list",
        completions: ['delete '],
        details: "delete\n---\nXx. \n\ndelete           With no options, xx\ndelete <record>  Remove <record> from the list\n",
        runner: function(context, options) {
          var $el, index;
          index = context.state.theList.indexOf(options[0]);
          if (-1 === index) {
            return "! Cannot delete: that record does not exist";
          } else {
            context.state.theList.splice(index, 1);
            if (null === context.transactionTime) {
              $el = document.getElementById(options[0]);
              $el.parentNode.removeChild($el);
            }
            return "deleted " + options[0];
          }
        }
      });
      this.ookonsole.addTask('render', {
        summary: "Deletes the rendered view, and rebuilds it from scratch",
        completions: ['render'],
        details: "render\n---\nXx. \n\nrender  Delete the rendered view, and rebuild it from scratch\n",
        runner: function(context, options) {
          var el, html;
          if (null !== context.transactionTime) {
            return "! Cannot render during a transaction: use `transaction end`";
          } else {
            html = (function() {
              var i, len, ref, results;
              ref = context.state.theList;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                el = ref[i];
                results.push("<li id='" + el + "'>" + el + "</li>");
              }
              return results;
            })();
            context.$list.innerHTML = html.join('');
            return "rendered the list";
          }
        }
      });
      this.ookonsole.addTask('transaction', {
        summary: "Begins or ends a set of related commands",
        completions: ['transaction ', 'transaction begin', 'transaction end'],
        details: "transaction\n---\nXx. @todo discussion about transactions\n\ntransaction        Echo information about the current transaction\ntransaction begin  Mark the start of a set of related commands\ntransaction end    Mark the completion of a set of related commands\n",
        runner: function(context, options) {
          if (!options.length) {
            if (null === context.transactionTime) {
              return "! No transaction is currently running: try `transaction begin`";
            } else {
              return "Current transaction has been running for " + (+(new Date) - context.transactionTime) + "ms";
            }
          } else if ('begin' === options[0]) {
            if (null !== context.transactionTime) {
              return "! Cannot start a transaction: one is already running";
            } else {
              context.transactionTime = +(new Date);
              return "Transaction begun, use `transaction end` to finish it";
            }
          } else if ('end' === options[0]) {
            if (null === context.transactionTime) {
              return "! Cannot end a transaction: no transaction is running";
            } else {
              context.transactionTime = null;
              return "Transaction ended";
            }
          }
        }
      });
      run = this.ookonsole.execute.bind(this.ookonsole);
      noCmdDisp = {
        storage: 'none',
        display: 'result'
      };
      noNothing = {
        storage: 'none',
        display: 'error'
      };
      noStorage = {
        storage: 'none',
        display: 'all'
      };
      log = window.localStorage.getItem('ookonsole.log');
      if (null === log) {
        run("echo First-run: adding sample data...", noCmdDisp);
        run('add Fred');
        return run("echo ...sample data added.", noCmdDisp);
      } else {
        run("echo Rebuilding app state from storage...", noCmdDisp);
        run('transaction begin', noNothing);
        ref = log.split('§');
        for (i = 0, len = ref.length; i < len; i++) {
          command = ref[i];
          run(command, noNothing);
        }
        run('transaction end', noNothing);
        run("echo ...app state rebuilt.", noCmdDisp);
        return run('render', noStorage);
      }
    };

    return AppState;

  })();

  if ('function' === typeof define && define.amd) {
    define(function() {
      return AppState;
    });
  } else if ('object' === typeof module && module && module.exports) {
    module.exports = AppState;
  } else {
    this.AppState = AppState;
  }

}).call(this);

// Generated by CoffeeScript 1.9.2

/*! Ookonsole 0.0.2 //// MIT Licence //// http://ookonsole.richplastow.com/ */

(function() {
  var Main, Task, zz, ª, ªA, ªB, ªC, ªE, ªF, ªN, ªO, ªR, ªS, ªU, ªV, ªX, ªex, ªhas, ªredefine, ªtype, ªuid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ªC = 'Ookonsole';

  ªV = '0.0.2';

  ªA = 'array';

  ªB = 'boolean';

  ªE = 'error';

  ªF = 'function';

  ªN = 'number';

  ªO = 'object';

  ªR = 'regexp';

  ªS = 'string';

  ªU = 'undefined';

  ªX = this;

  ª = console.log.bind(console);

  ªex = function(x, a, b) {
    var pos;
    if (-1 === (pos = a.indexOf(x))) {
      return x;
    } else {
      return b.charAt(pos);
    }
  };

  ªhas = function(h, n, t, f) {
    if (t == null) {
      t = true;
    }
    if (f == null) {
      f = false;
    }
    if (-1 !== h.indexOf(n)) {
      return t;
    } else {
      return f;
    }
  };

  ªtype = function(x) {
    return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
  };

  ªuid = function(p) {
    return p + '_' + (Math.random() + '1111111111111111').slice(2, 18);
  };

  ªredefine = function(obj, name, value, kind) {
    switch (kind) {
      case 'constant':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: true
        });
      case 'private':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: false
        });
    }
  };

  Main = (function() {
    Main.prototype.C = ªC;

    Main.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Main(config) {
      if (config == null) {
        config = {};
      }
      this.onKeydown = bind(this.onKeydown, this);
      this.context = config.context || null;
      if (ªO !== typeof this.context) {
        throw Error("`config.context` is type " + (typeof this.context) + " not 'object'");
      }
      this.tasks = {
        unrecognized: new Task({
          summary: 'Used when the requested task does not exist',
          runner: function(context, options) {
            return 'That task does not exist';
          }
        })
      };
      if (ªU === ªtype(config.$wrap)) {
        this.$wrap = null;
      } else if (config.$wrap instanceof ªX.HTMLElement) {
        this.$wrap = config.$wrap;
      } else {
        throw Error("`config.$wrap` is not an instance of `HTMLElement`");
      }
      if (!this.$wrap) {
        this.$box = null;
      } else {
        this.$box = ªX.document.createElement('div');
        this.$box.setAttribute('class', 'ookonsole-box');
      }
      if (!this.$wrap) {
        this.$style = null;
      } else {
        this.$style = ªX.document.createElement('style');
        this.$style.innerHTML = this.getStyle();
      }
      if (!this.$wrap) {
        this.$log = null;
      } else {
        this.$log = ªX.document.createElement('pre');
        this.$log.setAttribute('class', 'ookonsole-log');
        this.$box.appendChild(this.$log);
      }
      if (!this.$wrap) {
        this.$command = null;
      } else {
        this.$command = ªX.document.createElement('input');
        this.$command.setAttribute('class', 'ookonsole-command');
        this.$box.appendChild(this.$command);
      }
    }

    Main.prototype.show = function() {
      this.$wrap.appendChild(this.$style);
      return this.$wrap.appendChild(this.$box);
    };

    Main.prototype.hide = function() {
      this.$wrap.removeChild(this.$style);
      return this.$wrap.removeChild(this.$box);
    };

    Main.prototype.start = function() {
      this.$command.focus();
      return this.$command.addEventListener('keydown', this.onKeydown);
    };

    Main.prototype.stop = function() {
      return ª(456);
    };

    Main.prototype.onKeydown = function(event) {
      switch (event.keyCode) {
        case 13:
          return this.execute(this.$command.value);
        case 38:
          return ª('UP');
        case 40:
          return ª('DOWN');
      }
    };

    Main.prototype.execute = function(command) {
      var i, result, task;
      command = command.split(' ');
      i = command.length;
      while (0 < i--) {
        if ('' === command[i]) {
          command.splice(i, 1);
        }
      }
      task = this.tasks[command.shift()];
      if (!task) {
        task = this.tasks.unrecognized;
      }
      result = task.runner(this.context, command);
      return this.$log.innerHTML += result + '\n';
    };

    Main.prototype.getStyle = function() {
      return ".ookonsole-box {\n  padding:    0.5rem;\n  border:     1px solid #999;\n}\n.ookonsole-log {\n  margin:     0;\n  padding:    0.5rem;\n  border:     1px solid #999;\n  font:       1.1rem/1.4rem monaco, monospace;\n}\n.ookonsole-command {\n  display:    block;\n  box-sizing: border-box;\n  width:      100%;\n  padding:    0.5rem;\n  border:     1px solid #999;\n  font:       1.1rem/1.4rem monaco, monospace;\n}";
    };

    return Main;

  })();

  zz = function(xx) {};

  Task = (function() {
    Task.prototype.C = 'Task';

    Task.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Task(config) {
      if (config == null) {
        config = {};
      }
      this.summary = config.summary;
      if (ªS !== ªtype(this.summary)) {
        throw Error("`config.summary` is type " + (ªtype(this.summary)) + " not 'string'");
      }
      this.runner = config.runner;
      if (ªF !== ªtype(this.runner)) {
        throw Error("`config.runner` is type " + (ªtype(this.runner)) + " not 'function'");
      }
    }

    Task.prototype.run = function() {
      return this.runner.apply(context, options);
    };

    return Task;

  })();

  if (ªF === typeof define && define.amd) {
    define(function() {
      return Main;
    });
  } else if (ªO === typeof module && module && module.exports) {
    module.exports = Main;
  } else {
    this[ªC] = Main;
  }

}).call(this);
